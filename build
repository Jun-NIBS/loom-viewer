#! /bin/bash

# Remove old files
if [ -a ./python/loom_viewer/static/js ]; then
  rm -r ./python/loom_viewer/static/js
fi
if [ -a ./python/loom_viewer/static/css ]; then
  rm -r ./python/loom_viewer/static/css
fi
if [ -a ./python/build ]; then
  rm -r ./python/build
fi
if [ -a ./python/dist ]; then
  rm -r ./python/dist
fi

set -o nounset
set -o errexit

# Set up the static directory
mkdir ./python/loom_viewer/static/js
mkdir ./python/loom_viewer/static/css

# Build static assets

if  [ "${1:-dev}" == "dev" ]; then
  echo "Bundling development build and inserting it into HTML template"
  webpack --config='webpack.config.dev.js' --progress --profile --colors
else
  echo "Minifying + bundling production build and inserting it into HTML template"
  webpack --config='webpack.config.prod.js' --progress --profile --colors
fi

build_status=$?

if [ $build_status == 0 ]; then

  echo "Building static assets."
  # I haven't figured out how to both generate correct paths in the webpack HTML
  # template, and have the resulting index.html be put in the right folders.
  # Yes, it's an ugly hack, but it works - Job
  mv ./python/loom_viewer/index.html ./python/loom_viewer/static/index.html
  # Offline fallback
    mv ./python/loom_viewer/offline.html ./python/loom_viewer/static/offline.html

  # (AppCache manifest is built by Webpack)
  # Offline iframe for AppCache
  cp ./client/iframe-inject-appcache-manifest.html ./python/loom_viewer/static/iframe-inject-appcache-manifest.html

  # CSS
  uglifycss ./client/css/*.css > ./python/loom_viewer/static/css/bundle.min.css
  # Fonts
  cp -R ./client/fonts ./python/loom_viewer/static/

  cd python
  echo "Installing loom python package"
  python setup.py install --force
  cd ..
else
  echo "Minification not finished properly, aborting build"
  exit $build_status
fi