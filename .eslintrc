{
    "extends": "eslint:recommended",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "impliedStrict": true,
            "jsx": true,
            "experimentalObjectRestSpread": true
        }
    },
    "env": {
        "browser": true,
        "es6": true
    },
    "plugins": [
        "react"
    ],
    "rules": {
        "no-console": "off",
        "semi": "error",
        "no-var": "error",
        "eqeqeq": "error",
        "object-curly-newline": [
            "error",
            {
                "ObjectExpression": {
                    "multiline": true,
                    "minProperties": 2,
                    "consistent": true
                },
                "ObjectPattern": {
                    "multiline": true,
                    "minProperties": 2,
                    "consistent": true
                }
            }
        ],
        "object-curly-spacing": ["error", "always"],
        "no-unmodified-loop-condition": "error",
        "one-var-declaration-per-line": ["error", "always"],
        "yoda": "error",
        "arrow-body-style": [
            "error",
            "always"
        ],
        "array-callback-return": "error",
        "arrow-parens": "error",
        "arrow-spacing": "error",
        "prefer-arrow-callback": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-floating-decimal": "error",
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "error",
        "no-new": "error",
        "no-new-wrappers": "error",
        "no-return-assign": "error",
        "consistent-return": "error",
        "no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": true,
                "allowTernary": true
            }
        ],
        "no-shadow": "warn",
        "no-shadow-restricted-names": "error",
        "comma-style": [
            "error",
            "last"
        ],
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "comma-dangle": [
            "error",
            "always-multiline"
        ],
        "dot-location": [
            "error",
            "property"
        ],
        "quotes": [
            "error",
            "single"
        ],
        "jsx-quotes": [
            "error",
            "prefer-single"
        ],
        "no-mixed-spaces-and-tabs": "error",
        "no-whitespace-before-property": "error",
        "no-trailing-spaces": "error",
        "spaced-comment": "error",
        "no-unneeded-ternary": "error",
        "indent": [
            "error",
            "tab",
            {
                "SwitchCase": 1
            }
        ],
        "no-case-declarations": "off",
        "newline-per-chained-call": [
            "error"
        ],
        // React rules
        "react/jsx-uses-react": "error",
        "react/react-in-jsx-scope": "error",
        "react/require-render-return": "error",
        "react/no-unknown-property": "error",
        "react/jsx-wrap-multilines": "error",
        "react/no-danger": "error",
        "react/jsx-uses-vars": "error",
        "react/jsx-no-undef": "error",
        "react/jsx-no-duplicate-props": "error",
        "react/no-direct-mutation-state": "error",
        "react/no-did-update-set-state": "warn", // use componentWillUpdate instead
        "react/no-did-mount-set-state": "warn", // use componentWillMount instead
        "react/no-deprecated": "error",
        "react/prop-types": "error",
        "react/jsx-no-bind": "warn", // refactoring to prototype functions is more efficient
        "react/jsx-indent": [
            "error",
            "tab"
        ],
        "react/jsx-indent-props": [
            "error",
            "tab"
        ],
        "react/jsx-max-props-per-line": [
            "error",
            {
                "maximum": 2
            }
        ],
        "react/jsx-closing-tag-location": "error",
        "react/jsx-tag-spacing": "error",
        "react/jsx-boolean-value": [
            "error",
            "never"
        ],
        "react/jsx-no-comment-textnodes": "error"
    }
}